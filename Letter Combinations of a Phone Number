/* Given a string containing digits from 2-9 inclusive, 
return all possible letter combinations that the number could represent.
Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons)
is given below. Note that 1 does not map to any letters.*/
//Solution

class Solution {
    vector<string>p;
    vector<string>v={"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    void solve(string x,string& op,int i)
    {
        if(op.size()==x.size()||i==x.size())
        {
            if(op.size()==x.size()){
            p.push_back(op);
            }
            return ;
        }
        int k=x[i]-50;
        for(int j=0;j<v[k].size();j++)
        {
            op.push_back(v[k][j]);
            solve(x,op,i+1);
            op.pop_back();//backtracking...

        }
    }
public:
    vector<string> letterCombinations(string digits) {
        
        string op="";
        if(digits.empty())
        {
           
            return p;
        }
        solve(digits,op,0);
        return p;
    }
};
